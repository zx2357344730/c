<?xml version="1.0" encoding="UTF-8"?>
<!--monitorInterval:定时检测配置文件的修改,有变化则自动重新加载配置,时间单位为秒,最小间隔为5s -->
<configuration status="info" monitorInterval="1800">

    <!--properties:设置全局变量 -->
    <Properties>
        <!-- 模块名 -->
        <property name="moduleName">action</property>log4j2-spring.xml
        <!-- 日志内容格式化 -->
        <property name="format">%d{yyyy/MM/dd HH:mm:ss.SSS}  %-5level  %t  ${moduleName}  %logger{50}:%L  %X{uniqueId}  %X{clientIp}  %msg%n
        </property>
        <!-- 单个日志文件大小限制 -->
        <property name="fileLimit">10MB</property>
        <!-- 历史日志保留时长 -->
        <property name="fileHistoryLimit">720H</property>
        <!-- 日志路径前缀 -->
        <!-- 测试环境 -->
        <property name="logPath">/home/jar/logs</property>

        <!--<property name="logPath">logs</property> /home/jar/logs  -->
    </Properties>

    <!--Appenders:定义日志输出目的地，内容和格式等 -->
    <appenders>

        <!--Console:日志输出到控制台标准输出 -->
        <!-- 控制台的配置 -->
        <Console name="STDOUT">
            <!-- 控制台只输出level及以上级别的信息 -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--pattern:日期,线程名,日志级别,日志名称,日志信息,换行 -->
            <!-- 输出日志的格式-->
            <PatternLayout pattern="${format}" charset="UTF-8"/>
            <!--  改成JSON格式 官方說明：https://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/layout/JsonLayout.html -->
            <!--<JsonLayout compact="true" locationInfo="true" complete="false" eventEol="true" pattern="${format}" charset="UTF-8"/>-->
            <!--<JsonLayout compact="true" locationInfo="true" complete="false" eventEol="true"  charset="UTF-8"/>-->

        </Console>
        <!--RollingFile:日志输出到文件,下面的文件都使用相对路径 -->
        <!--fileName:当前日志输出的文件名称 -->
        <!--filePattern:备份日志文件名称，备份目录为logs下面以年月命名的目录，备份时使用gz格式压缩 -->
        <!-- info - 基本存放所有日志信息，用来主要用来采集和查看 -->
        <RollingRandomAccessFile name="FILE-INFO" fileName="${logPath}/${moduleName}/${moduleName}.log"
                                 filePattern="${logPath}/${moduleName}/info/%d{yyyy-MM}/info-%d{yyyy-MM-dd-HH}-%i.log">

            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${format}" charset="UTF-8"/>
            <!--Policies:触发策略决定何时执行备份 这里是根据文件大小而触发滚动也就是把当前文件清空再存放到某一个地方-->
            <!--  https://blog.csdn.net/backbug/article/details/102699503   滚动策略博客,有定时器策略       -->
            <Policies>
                <!--TimeBasedTriggeringPolicy:日志文件按照文件大小备份 -->
                <!--SizeBasedTriggeringPolicy:日志文件按照时间备份 -->
                <!--interval:每1天生成一个新文件，时间单位需要结合filePattern时间%d{yyyy-MM-dd} -->
                <!--同理，如果要每1小时生成一个新文件，则改成%d{yyyy-MM-ddHH} -->
                <!--modulate:对备份日志的生成时间纠偏，纠偏以0为基准进行，"0+interval"决定启动后第一次备份时间 -->
                <SizeBasedTriggeringPolicy size="${fileLimit}"/>
            </Policies>
            <DefaultRolloverStrategy max="500">
                <!--Delete:删除匹配到的过期备份文件 -->
                <!--maxDepth:由于备份文件保存在logs/${moduleName}/info/%d{yyyy-MM}/info-%d{yyyy-MM-dd-HH}-%i.log,所以目录深度设置为 5 -->
                <Delete basePath="logs" maxDepth="5">
                    <!--IfFileName:匹配文件名称 -->
                    <!--glob:匹配2级目录深度下的以.log.gz结尾的备份文件 -->
                    <IfFileName glob="${moduleName}/**/*info*.log"/>
                    <!--IfLastModified:匹配文件修改时间 -->
                    <!--age:匹配超过180天的文件，单位D、H、M、S分别表示天、小时、分钟、秒-->
                    <IfLastModified age="${fileHistoryLimit}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <RollingRandomAccessFile name="FILE-WARN" fileName="${logPath}/${moduleName}/warn.log"
                                 filePattern="${logPath}/${moduleName}/warn/%d{yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${format}" charset="UTF-8"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="${fileLimit}"/>
            </Policies>
            <DefaultRolloverStrategy max="500">
                <Delete basePath="logs" maxDepth="5">
                    <IfFileName glob="${moduleName}/**/*warn*.log"/>
                    <IfLastModified age="${fileHistoryLimit}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
        <!-- error -->
        <RollingRandomAccessFile name="FILE-ERROR" fileName="${logPath}/${moduleName}/error.log"
                                 filePattern="${logPath}/${moduleName}/error/%d{yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${format}" charset="UTF-8"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="${fileLimit}"/>
            </Policies>
            <DefaultRolloverStrategy max="500">
                <Delete basePath="logs" maxDepth="5">
                    <IfFileName glob="${moduleName}/**/*error*.log"/>
                    <IfLastModified age="${fileHistoryLimit}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
    </appenders>

    <!--Loggers:定义日志级别和使用的Appenders -->
    <loggers>
        <!--Root:日志默认打印到控制台 -->
        <!--level日志级别: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF -->
        <!--AsyncRoot：异步模式        -->
        <!-- root -->
        <AsyncRoot level="info" includeLocation="true">
            <AppenderRef ref="FILE-INFO"/>
            <AppenderRef ref="FILE-WARN"/>
            <AppenderRef ref="FILE-ERROR"/>
            <AppenderRef ref="STDOUT"/>

        </AsyncRoot>
        <!-- additivity=true：接着log上次位置继续打印，false：直接清空log重新打印       -->
        <!-- 自定义 - 只开启本项目的debug级别日志 -->
        <AsyncLogger level="debug" name="com.cresign.login" additivity="false" includeLocation="true">
            <appender-ref ref="FILE-INFO"/>
            <appender-ref ref="STDOUT"/>
            <!-- 4.添加自定义级别 -->
        </AsyncLogger>
    </loggers>
</configuration>